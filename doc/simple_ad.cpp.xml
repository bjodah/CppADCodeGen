<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Simple Multi-Threading AD: Example and Test</title>
<meta name="description" id="description" content="Simple Multi-Threading AD: Example and Test"/>
<meta name="keywords" id="keywords" content=" thread multiple simple Ad multi_thread "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_simple_ad.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="a11c_pthread.cpp.xml" target="_top">Prev</a>
</td><td><a href="arc_tan.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>simple_ad.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>multi_thread</option>
<option>library</option>
<option>cppad_ipopt_nlp</option>
<option>Example</option>
<option>preprocessor</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>multi_thread-&gt;</option>
<option>parallel_ad</option>
<option>team_thread.hpp</option>
<option>thread_test.cpp</option>
<option>simple_ad.cpp</option>
<option>harmonic.cpp</option>
<option>multi_newton.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>simple_ad.cpp-&gt;</option>
<option>arc_tan.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Discussion</option>
<option>thread_team</option>
<option>arc_tan</option>
<option>Source Code</option>
</select>
</td>
</tr></table><br/>



<center><b><big><big>Simple Multi-Threading AD: Example and Test</big></big></b></center>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
This example demonstrates how CppAD can be used in a 
multi-threading environment.

<br/>
<br/>
<b><big><a name="Discussion" id="Discussion">Discussion</a></big></b>
<br/>
The function <code><font color="blue">arc_tan</font></code> below
is an implementation of the inverse tangent function where the
<a href="glossary.xml#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&#xA0;sequence</span></a>
 depends on the
argument values. 
Hence the function needs to be re-taped 
for different argument values.
The <a href="atan2.xml" target="_top"><span style='white-space: nowrap'>atan2</span></a>
 function uses <a href="condexp.xml" target="_top"><span style='white-space: nowrap'>CondExp</span></a>
 operations
to avoid the need to re-tape.

<br/>
<br/>
<b><big><a name="thread_team" id="thread_team">thread_team</a></big></b>
<br/>
The following three implementations of the <a href="team_thread.hpp.xml" target="_top"><span style='white-space: nowrap'>team_thread.hpp</span></a>
 specifications
are included:
<table><tr><td align='left'  valign='top'>

<a href="team_openmp.cpp.xml" target="_top">team_openmp.cpp</a></td><td>
OpenMP Implementation of a Team of AD Threads</td></tr>
<tr><td>

<a href="team_bthread.cpp.xml" target="_top">team_bthread.cpp</a></td><td>
Boost Thread Implementation of a Team of AD Threads</td></tr>
<tr><td>

<a href="team_pthread.cpp.xml" target="_top">team_pthread.cpp</a></td><td>
Pthread Implementation of a Team of AD Threads</td></tr>
<tr><td>

</td></tr>
</table>
<br/>
<b><big><a name="arc_tan" id="arc_tan">arc_tan</a></big></b>

<table><tr><td align='left'  valign='top'>

<a href="arc_tan.cpp.xml" target="_top">arc_tan.cpp</a></td><td>
Two Argument Inverse Tangent Function</td></tr>
<tr><td>

</td></tr>
</table>
<br/>
<b><big><a name="Source Code" id="Source Code">Source Code</a></big></b>

<code><font color="blue">
<br/>
<pre style='display:inline'> 
# include &lt;cppad/cppad.hpp&gt;
# include &quot;team_thread.hpp&quot;
# include &quot;arc_tan.hpp&quot;
# include &quot;simple_ad.hpp&quot;
# define NUMBER_THREADS  4

namespace {
	// structure with information for one thread
	typedef struct {
		// angle for this work (worker input)
		double          theta;
		// false if an error occurs, true otherwise (worker output)
		bool            ok;
	} work_one_t;
	// vector with information for all threads
	work_one_t work_all_[NUMBER_THREADS];
	// --------------------------------------------------------------------
	// function that does the work for one thread
	void worker(void)
	{	using CppAD::NearEqual;
		using CppAD::AD;
		bool ok = true;
		size_t thread_num = CppAD::thread_alloc::thread_num();

		// CppAD::vector uses the CppAD fast multi-threading allocator
		CppAD::vector&lt; <a href="ad.xml" target="_top">AD</a>&lt;double&gt; &gt; Theta(1), Z(1);
		Theta[0] = work_all_[thread_num].theta;
		<a href="independent.xml" target="_top">Independent</a>(Theta);
		<a href="ad.xml" target="_top">AD</a>&lt;double&gt; x = cos(Theta[0]);
		<a href="ad.xml" target="_top">AD</a>&lt;double&gt; y = sin(Theta[0]);
		Z[0]  = arc_tan( x, y );
		CppAD::<a href="funconstruct.xml" target="_top">ADFun</a>&lt;double&gt; f(Theta, Z); 

		// Check function value corresponds to the identity 
		double eps = 10. * CppAD::epsilon&lt;double&gt;();
		ok        &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(Z[0], Theta[0], eps, eps);

		// Check derivative value corresponds to the identity.
		CppAD::vector&lt;double&gt; d_theta(1), d_z(1);
		d_theta[0] = 1.;
		d_z        = f.<a href="forward.xml" target="_top">Forward</a>(1, d_theta);
		ok        &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(d_z[0], 1., eps, eps);

		// pass back ok information for this thread
		work_all_[thread_num].ok = ok;
	}
}

// This test routine is only called by the master thread (thread_num = 0).
bool simple_ad(void)
{	bool ok = true;
	using CppAD::thread_alloc;

	size_t num_threads = NUMBER_THREADS;

	// Check that no memory is in use or avialable at start
	// (using thread_alloc in sequential mode)
	size_t thread_num;
	for(thread_num = 0; thread_num &lt; num_threads; thread_num++)
	{	ok &amp;= thread_alloc::inuse(thread_num) == 0; 
		ok &amp;= thread_alloc::available(thread_num) == 0; 
	}

	// initialize work_all_
 	double pi = 4. * atan(1.);
	for(thread_num = 0; thread_num &lt; num_threads; thread_num++)
	{	// set to value by worker for this thread
		work_all_[thread_num].ok           = false;
		// theta 
		work_all_[thread_num].theta        = thread_num * pi / num_threads;
	}

	ok &amp;= team_start(num_threads);
	ok &amp;= team_work(worker);
	ok &amp;= team_stop();


	// Check that no memory currently in use, and free avialable memory.
	for(thread_num = 0; thread_num &lt; num_threads; thread_num++)
	{	ok &amp;= thread_alloc::inuse(thread_num) == 0; 
		thread_alloc::free_available(thread_num); 
	}

	return ok;
}</pre>
</font></code>


<hr/>Input File: multi_thread/simple_ad.cpp

</body>
</html>
