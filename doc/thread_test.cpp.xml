<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Run Multi-Threading Examples and Speed Tests</title>
<meta name="description" id="description" content="Run Multi-Threading Examples and Speed Tests"/>
<meta name="keywords" id="keywords" content=" thread_test example speed thread multi openmp run tests pthread bthread "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_thread_test.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="team_pthread.cpp.xml" target="_top">Prev</a>
</td><td><a href="a11c_openmp.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>multi_thread</option>
<option>library</option>
<option>cppad_ipopt_nlp</option>
<option>Example</option>
<option>preprocessor</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>multi_thread-&gt;</option>
<option>parallel_ad</option>
<option>team_thread.hpp</option>
<option>thread_test.cpp</option>
<option>simple_ad.cpp</option>
<option>harmonic.cpp</option>
<option>multi_newton.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>thread_test.cpp-&gt;</option>
<option>a11c_openmp.cpp</option>
<option>a11c_bthread.cpp</option>
<option>a11c_pthread.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Running Tests</option>
<option>---..threading</option>
<option>Purpose</option>
<option>a11c</option>
<option>simple_ad</option>
<option>harmonic</option>
<option>---..test_time</option>
<option>---..max_threads</option>
<option>---..mega_sum</option>
<option>multi_newton</option>
<option>---..test_time</option>
<option>---..max_threads</option>
<option>---..num_zero</option>
<option>---..num_sub</option>
<option>---..num_sum</option>
<option>---..use_ad</option>
<option>Threading System Specific Routines</option>
<option>Source</option>
</select>
</td>
</tr></table><br/>










<center><b><big><big>Run Multi-Threading Examples and Speed Tests</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br/>

<code><font color="blue"><span style='white-space: nowrap'>./</span></font><i><font color="black"><span style='white-space: nowrap'>threading</span></font></i><font color="blue"><span style='white-space: nowrap'>_test&#xA0;a11c<br/>
./</span></font><i><font color="black"><span style='white-space: nowrap'>threading</span></font></i><font color="blue"><span style='white-space: nowrap'>_test&#xA0;simple_ad<br/>
./</span></font><i><font color="black"><span style='white-space: nowrap'>threading</span></font></i><font color="blue"><span style='white-space: nowrap'>_test&#xA0;harmonic&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>test_time</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>max_threads</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>mega_sum</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
./</span></font><i><font color="black"><span style='white-space: nowrap'>threading</span></font></i><font color="blue"><span style='white-space: nowrap'>_test&#xA0;multi_newton&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>test_time</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>max_threads</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;\<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_zero</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_sub</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_sum</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>use_ad</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>threading</span></font></i></code>
 is either
<code><font color="blue">bthread</font></code>, <code><font color="blue">openmp</font></code>, or <code><font color="blue">pthread</font></code>. 

<br/>
<br/>
<b><big><a name="Running Tests" id="Running Tests">Running Tests</a></big></b>
<br/>
You can build this program and run the default version of its test
parameters by executing the following commands:

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;cd&#xA0;multi_thread<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;make&#xA0;test<br/>
</span></font></code>
After this operation you can run the syntax above
for the different valid values of 
<code><i><font color="black"><span style='white-space: nowrap'>threading</span></font></i></code>
:

<br/>
<br/>
<b><a name="Running Tests.threading" id="Running Tests.threading">threading</a></b>



<br/>
If <a href="installunix.xml#OpenmpFlags" target="_top"><span style='white-space: nowrap'>OpenmpFlags</span></a>
 
are specified during configuration,
you can execute the syntax above with

<code><i><font color="black"><span style='white-space: nowrap'>threading</span></font></i></code>
 equal to <code><font color="blue">openmp</font></code>.
If pthreads with barriers are supported by your system,
you can use 
<code><i><font color="black"><span style='white-space: nowrap'>threading</span></font></i></code>
 equal to <code><font color="blue">pthread</font></code>.
If boost threads have been installed,
you can use 
<code><i><font color="black"><span style='white-space: nowrap'>threading</span></font></i></code>
 equal to <code><font color="blue">bthread</font></code>.

<br/>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
Runs the CppAD multi-threading examples and timing tests:



<br/>
<br/>
<b><big><a name="a11c" id="a11c">a11c</a></big></b>
<br/>
The examples 
<a href="a11c_openmp.cpp.xml" target="_top"><span style='white-space: nowrap'>a11c_openmp.cpp</span></a>
,
<a href="a11c_bthread.cpp.xml" target="_top"><span style='white-space: nowrap'>a11c_bthread.cpp</span></a>
, and
<a href="a11c_pthread.cpp.xml" target="_top"><span style='white-space: nowrap'>a11c_pthread.cpp</span></a>

demonstrate simple multi-threading, 
without algorithmic differentiation, using
OpenMP, Boost threads, and pthreads respectively

<br/>
<br/>
<b><big><a name="simple_ad" id="simple_ad">simple_ad</a></big></b>
<br/>
The <a href="simple_ad.cpp.xml" target="_top"><span style='white-space: nowrap'>simple_ad.cpp</span></a>
 routine
demonstrates simple multi-threading with algorithmic differentiation. 

<br/>
<br/>
<b><big><a name="harmonic" id="harmonic">harmonic</a></big></b>
<br/>
The <a href="harmonic_time.cpp.xml" target="_top"><span style='white-space: nowrap'>harmonic_time.cpp</span></a>
 routine
preforms a timing test for a multi-threading 
example without algorithmic differentiation.

<br/>
<br/>
<b><a name="harmonic.test_time" id="harmonic.test_time">test_time</a></b>
<br/>
Is the minimum amount of wall clock time that the test should take.
The number of repeats for the test will be increased until this time
is reached. 
The reported time is the total wall clock time divided by the
number of repeats.

<br/>
<br/>
<b><a name="harmonic.max_threads" id="harmonic.max_threads">max_threads</a></b>
<br/>
If the argument 
<code><i><font color="black"><span style='white-space: nowrap'>max_threads</span></font></i></code>
 is a non-negative integer specifying
the maximum number of threads to use for the test.
The specified test is run with the following number of threads:

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;0&#xA0;,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>max_threads</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
The value of zero corresponds to not using the multi-threading system.

<br/>
<br/>
<b><a name="harmonic.mega_sum" id="harmonic.mega_sum">mega_sum</a></b>
<br/>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>mega_sum</span></font></i></code>
 
is an integer greater than or equal one and has the same meaning as in
<a href="harmonic_time.cpp.xml#mega_sum" target="_top"><span style='white-space: nowrap'>harmonic_time.cpp</span></a>
.

<br/>
<br/>
<b><big><a name="multi_newton" id="multi_newton">multi_newton</a></big></b>
<br/>
The <a href="multi_newton_time.cpp.xml" target="_top"><span style='white-space: nowrap'>multi_newton_time.cpp</span></a>
 routine
preforms a timing test for a multi-threading 
example with algorithmic differentiation.

<br/>
<br/>
<b><a name="multi_newton.test_time" id="multi_newton.test_time">test_time</a></b>
<br/>
Is the minimum amount of wall clock time that the test should take.
The number of repeats for the test will be increased until this time
is reached. 
The reported time is the total wall clock time divided by the
number of repeats.

<br/>
<br/>
<b><a name="multi_newton.max_threads" id="multi_newton.max_threads">max_threads</a></b>
<br/>
If the argument 
<code><i><font color="black"><span style='white-space: nowrap'>max_threads</span></font></i></code>
 is a non-negative integer specifying
the maximum number of threads to use for the test.
The specified test is run with the following number of threads:

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;0&#xA0;,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>max_threads</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
The value of zero corresponds to not using the multi-threading system.

<br/>
<br/>
<b><a name="multi_newton.num_zero" id="multi_newton.num_zero">num_zero</a></b>
<br/>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>num_zero</span></font></i></code>
 
is an integer greater than or equal two and has the same meaning as in
<a href="multi_newton_time.cpp.xml#num_zero" target="_top"><span style='white-space: nowrap'>multi_newton_time.cpp</span></a>
.

<br/>
<br/>
<b><a name="multi_newton.num_sub" id="multi_newton.num_sub">num_sub</a></b>
<br/>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>num_sub</span></font></i></code>
 
is an integer greater than or equal one and has the same meaning as in
<a href="multi_newton_time.cpp.xml#num_sub" target="_top"><span style='white-space: nowrap'>multi_newton_time.cpp</span></a>
.

<br/>
<br/>
<b><a name="multi_newton.num_sum" id="multi_newton.num_sum">num_sum</a></b>
<br/>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>num_sum</span></font></i></code>
 
is an integer greater than or equal one and has the same meaning as in
<a href="multi_newton_time.cpp.xml#num_sum" target="_top"><span style='white-space: nowrap'>multi_newton_time.cpp</span></a>
.

<br/>
<br/>
<b><a name="multi_newton.use_ad" id="multi_newton.use_ad">use_ad</a></b>
<br/>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>use_ad</span></font></i></code>
 is either 
<code><font color="blue">true</font></code> or <code><font color="blue">false</font></code> and has the same meaning as in
<a href="multi_newton_time.cpp.xml#use_ad" target="_top"><span style='white-space: nowrap'>multi_newton_time.cpp</span></a>
.

<br/>
<br/>
<b><big><a name="Threading System Specific Routines" id="Threading System Specific Routines">Threading System Specific Routines</a></big></b>
<br/>
The following routines are used to link specific threading
systems through the common interface <a href="team_thread.hpp.xml" target="_top"><span style='white-space: nowrap'>team_thread.hpp</span></a>
:
<table><tr><td align='left'  valign='top'>

<a href="team_openmp.cpp.xml" target="_top">team_openmp.cpp</a></td><td>
OpenMP Implementation of a Team of AD Threads</td></tr>
<tr><td>

<a href="team_bthread.cpp.xml" target="_top">team_bthread.cpp</a></td><td>
Boost Thread Implementation of a Team of AD Threads</td></tr>
<tr><td>

<a href="team_pthread.cpp.xml" target="_top">team_pthread.cpp</a></td><td>
Pthread Implementation of a Team of AD Threads</td></tr>
<tr><td>

</td></tr>
</table>
<br/>
<b><big><a name="Source" id="Source">Source</a></big></b>

<code><font color="blue">
<br/>
<pre style='display:inline'> 

# include &lt;cppad/cppad.hpp&gt;
# include &lt;cmath&gt;
# include &lt;cstring&gt;
# include &lt;ctime&gt;
# include &quot;team_thread.hpp&quot;
# include &quot;simple_ad.hpp&quot;
# include &quot;harmonic_time.hpp&quot;
# include &quot;multi_newton_time.hpp&quot;

extern bool a11c(void);

namespace {
	size_t arg2size_t(
		const char* arg       , 
		int limit             , 
		const char* error_msg )
	{	int i = std::atoi(arg);
		if( i &gt;= limit )
			return size_t(i);
		std::cerr &lt;&lt; &quot;value = &quot; &lt;&lt; i &lt;&lt; std::endl;
		std::cerr &lt;&lt; error_msg &lt;&lt; std::endl;
		exit(1);
	}
	double arg2double(
		const char* arg       , 
		double limit          , 
		const char* error_msg )
	{	double d = std::atof(arg);
		if( d &gt;= limit )
			return d;
		std::cerr &lt;&lt; &quot;value = &quot; &lt;&lt; d &lt;&lt; std::endl;
		std::cerr &lt;&lt; error_msg &lt;&lt; std::endl;
		exit(1);
	}
}

int main(int argc, char *argv[])
{	using CppAD::thread_alloc;
	bool ok         = true;
	using std::cout;
	using std::endl;

	// commnd line usage message
	const char* usage = 
	&quot;./&lt;thread&gt;_test a11c\n&quot;
	&quot;./&lt;thread&gt;_test simple_ad\n&quot;
	&quot;./&lt;thread&gt;_test harmonic    test_time max_threads mega_sum\n&quot;
	&quot;./&lt;thread&gt;_test multi_newton test_time max_threads\\\n&quot;
	&quot;	num_zero num_sub num_sum use_ad\\\n&quot;
	&quot;where &lt;thread&gt; is bthread, openmp, or pthread&quot;;

	// command line argument values (assign values to avoid compiler warnings)
	size_t num_zero=0, num_sub=0, num_sum=0;
	bool use_ad=true;

	// put the date and time in the output file
	std::time_t rawtime;
	std::time( &amp;rawtime );
	const char* gmt = std::asctime( std::gmtime( &amp;rawtime ) );
	size_t len = size_t( std::strlen(gmt) );
	cout &lt;&lt; &quot;gmtime        = '&quot;;
	for(size_t i = 0; i &lt; len; i++) 
		if( gmt[i] != '\n' ) cout &lt;&lt; gmt[i];
	cout &lt;&lt; &quot;';&quot; &lt;&lt; endl;

	// CppAD version number
	cout &lt;&lt; &quot;cppad_version = '&quot; &lt;&lt; CPPAD_PACKAGE_STRING &lt;&lt; &quot;';&quot; &lt;&lt; endl; 

	// put the team name in the output file
	cout &lt;&lt; &quot;team_name     = '&quot; &lt;&lt; team_name() &lt;&lt; &quot;';&quot; &lt;&lt; endl;

	// print command line as valid matlab/octave
	cout &lt;&lt; &quot;command       = '&quot; &lt;&lt; argv[0];
	for(int i = 1; i &lt; argc; i++)
		cout &lt;&lt; &quot; &quot; &lt;&lt; argv[i];
	cout &lt;&lt; &quot;';&quot; &lt;&lt; endl;

	ok = false;
	const char* test_name = &quot;&quot;;
	if( argc &gt; 1 )
		test_name = *++argv;
	bool run_a11c         = std::strcmp(test_name, &quot;a11c&quot;)         == 0;
	bool run_simple_ad    = std::strcmp(test_name, &quot;simple_ad&quot;)    == 0;
	bool run_harmonic    = std::strcmp(test_name, &quot;harmonic&quot;)    == 0;
	bool run_multi_newton = std::strcmp(test_name, &quot;multi_newton&quot;) == 0;
	if( run_a11c || run_simple_ad )
		ok = (argc == 2);
	else if( run_harmonic )
		ok = (argc == 5);  
	else if( run_multi_newton )
		ok = (argc == 8);
	if( ! ok )
	{	std::cerr &lt;&lt; &quot;test_name     = &quot; &lt;&lt; test_name &lt;&lt; endl;	
		std::cerr &lt;&lt; &quot;argc          = &quot; &lt;&lt; argc      &lt;&lt; endl;	
		std::cerr &lt;&lt; usage &lt;&lt; endl;
		exit(1);
	}
	if( run_a11c || run_simple_ad )
	{	if( run_a11c )
			ok        = a11c();
		else ok        = simple_ad();
		if( ok )
		{	cout &lt;&lt; &quot;OK            = true;&quot;  &lt;&lt; endl;
			exit(0);
		}
		else
		{	cout &lt;&lt; &quot;OK            = false;&quot; &lt;&lt; endl;
			exit(1);
		}
	}

	// test_time 
	double test_time = arg2double( *++argv, 0., 
		&quot;run: test_time is less than zero&quot;
	);

	// max_threads 
	size_t max_threads = arg2size_t( *++argv, 0, 
		&quot;run: max_threads is less than zero&quot;
	);

	size_t mega_sum = 0; // assignment to avoid compiler warning
	if( run_harmonic )
	{	// mega_sum
		mega_sum = arg2size_t( *++argv, 1, 
			&quot;run: mega_sum is less than one&quot;
		);
	}
	else
	{	ok &amp;= run_multi_newton;

		// num_zero
		num_zero = arg2size_t( *++argv, 2,
			&quot;run: num_zero is less than two&quot;
		);

		// num_sub
		num_sub = arg2size_t( *++argv, 1,
			&quot;run: num_sub is less than one&quot;
		);
       
		// num_sum 
		num_sum = arg2size_t( *++argv, 1,
			&quot;run: num_sum is less than one&quot;
		);

		// use_ad
		++argv;
		if( std::strcmp(*argv, &quot;true&quot;) == 0 )
			use_ad = true;
		else if( std::strcmp(*argv, &quot;false&quot;) == 0 )
			use_ad = false;
		else
		{	std::cerr &lt;&lt; &quot;run: use_ad = '&quot; &lt;&lt; *argv;
			std::cerr &lt;&lt; &quot;' is not true or false&quot; &lt;&lt; endl;
			exit(1);
		}
	}

	// run the test for each number of threads
	size_t num_threads, inuse_this_thread = 0;
	cout &lt;&lt; &quot;time_all  = [&quot; &lt;&lt; endl;
	for(num_threads = 0; num_threads &lt;= max_threads; num_threads++)
	{	double time_out;

		// set the number of threads
		if( num_threads &gt; 0 )
			ok &amp;= team_start(num_threads);

		// ammount of memory initialy inuse by thread zero
		ok &amp;= 0 == thread_alloc::thread_num();
		inuse_this_thread = thread_alloc::inuse(0);

		// run the requested test
		if( run_harmonic ) ok &amp;= 
			harmonic_time(time_out, test_time, num_threads, mega_sum);
		else
		{	ok &amp;= run_multi_newton;
			ok &amp;= multi_newton_time(
				time_out                ,
				test_time               ,
				num_threads             ,
				num_zero                ,
				num_sub                 ,
				num_sum                 ,
				use_ad
			);
		}

		// set back to one thread and fee all avaialable memory
		if( num_threads &gt; 0 )
			ok &amp;= team_stop();
		size_t thread;
		for(thread = 0; thread &lt; num_threads; thread++)
		{	thread_alloc::free_available(thread);
			if( thread == 0 )
				ok &amp;= thread_alloc::inuse(thread) == inuse_this_thread;
			else	ok &amp;= thread_alloc::inuse(thread) == 0;
		}
		cout &lt;&lt; &quot;\t&quot; &lt;&lt; time_out &lt;&lt; &quot; % &quot;;
		if( num_threads == 0 )
			cout &lt;&lt; &quot;no threading&quot; &lt;&lt; endl;
		else	cout &lt;&lt; num_threads &lt;&lt; &quot; threads&quot; &lt;&lt; endl;
	}
	cout &lt;&lt; &quot;];&quot; &lt;&lt; endl;
	if( ok )
		cout &lt;&lt; &quot;OK            = true;&quot;  &lt;&lt; endl;
	else cout &lt;&lt; &quot;OK            = false;&quot; &lt;&lt; endl;

	return  ! ok;
}
</pre>
</font></code>


<hr/>Input File: multi_thread/thread_test.cpp

</body>
</html>
