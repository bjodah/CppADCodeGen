<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Machine Epsilon: Example and Test</title>
<meta name="description" id="description" content="Machine Epsilon: Example and Test"/>
<meta name="keywords" id="keywords" content=" epsilon example test "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_epsilon.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="epsilon.xml" target="_top">Prev</a>
</td><td><a href="erf.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>MathOther</option>
<option>epsilon</option>
<option>epsilon.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>std_math_ad</option>
<option>MathOther</option>
<option>CondExp</option>
<option>Discrete</option>
<option>user_atomic</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>MathOther-&gt;</option>
<option>abs</option>
<option>atan2</option>
<option>epsilon</option>
<option>erf</option>
<option>pow</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>epsilon-&gt;</option>
<option>epsilon.cpp</option>
</select>
</td>
<td>epsilon.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>Machine Epsilon: Example and Test</big></big></b></center>
<code><font color="blue"><pre style='display:inline'> 

# ifdef _MSC_VER
// Supress Microsoft compiler warning about possible loss of precision,
// in the constructors (when converting to std::complex&lt;float&gt;)
//	Type one = 1
//	Type two = 2
// 1 and 2 are small enough so no loss of precision when converting to float.
# pragma warning(disable:4244)
# endif

# include &lt;cppad/cppad.hpp&gt;
# include &lt;complex&gt;

namespace {
	template &lt;class Type&gt;
	Type add_one(const Type&amp; value)
	{	return( Type(1) + value ); }
	//
	template &lt;class Type&gt;
	bool check_epsilon(void)
	{	bool ok  = true;
		using CppAD::epsilon;
		using CppAD::abs;
		Type eps   = CppAD::epsilon&lt;Type&gt;();
		Type one   = 1;
		Type two   = 2;
		Type eps2  = eps / two; 
		Type check = add_one(eps);
		ok        &amp;= one !=  check;
		check      = add_one(eps2);
		ok        &amp;= one == check;
		return ok;
	}
}

bool epsilon(void)
{	bool ok = true;
	using CppAD::AD;

	// Machine epsilon for Base types defined by CppAD
	// (see base_require for defining ones own Base type).
	ok &amp;= check_epsilon&lt;float&gt;();
	ok &amp;= check_epsilon&lt;double&gt;();
	ok &amp;= check_epsilon&lt; std::complex&lt;float&gt; &gt;();
	// ok &amp;= check_epsilon&lt; std::complex&lt;double&gt; &gt;();

	// Machine epsilon for some AD types. 
	ok &amp;= check_epsilon&lt; <a href="ad.xml" target="_top">AD</a>&lt;float&gt; &gt;();
	ok &amp;= check_epsilon&lt; <a href="ad.xml" target="_top">AD</a>&lt;double&gt; &gt;();
	ok &amp;= check_epsilon&lt;  <a href="ad.xml" target="_top">AD</a>&lt;std::complex&lt;float&gt; &gt; &gt;();
	ok &amp;= check_epsilon&lt;  <a href="ad.xml" target="_top">AD</a>&lt;std::complex&lt;double&gt; &gt; &gt;();

	return ok;
}</pre>
</font></code>


<hr/>Input File: example/epsilon.cpp

</body>
</html>
